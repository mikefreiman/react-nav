{"version":3,"sources":["assets/tile.svg","components/Logo.js","components/Nav.js","components/styles/Banner.js","components/styles/Flex.js","components/styles/Tagline.js","components/Section.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LogoA","styled","a","_templateObject","LogoSvg","svg","_templateObject2","Logo","react_default","createElement","href","xmlns","viewBox","transform","id","d","Component","Nav","nav","Nav_templateObject","Navbar","div","Nav_templateObject2","Navicon","_templateObject3","Menu","_templateObject4","ToggleNav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isToggleOn","handleClick","bind","assertThisInitialized","setState","prevState","components_Logo","onClick","className","Banner","h1","Banner_templateObject","val","Flex","section","Flex_templateObject","justify","pad","Tagline","Tagline_templateObject","Section","Section_templateObject","Tile","components_Section","styles_Flex","Banner_default","Tagline_default","App","components_Nav","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9fb8ba6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tile.8bffcc75.svg\";","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst LogoA = styled.a`\n  align-self: center;\n  margin-left: 6px;\n  width: 150px;\n  height: auto;\n`;\n\nconst LogoSvg = styled.svg`\n  align-self: center;\n  margin-left: 6px;\n  width: 54px;\n  height: auto;\n  path {\n    opacity: 1;\n    fill: #000000;\n    fill-opacity: 1;\n    stroke: none;\n    stroke-width: 10;\n    stroke-miterlimit: 4;\n    stroke-dasharray: none;\n    stroke-opacity: 1;\n  }\n`;\n\nclass Logo extends Component {\n    render() {\n        return (\n            <LogoA href=\"/\">\n                <LogoSvg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 100.00006 100\"\n                >\n                    <g transform=\"translate(2696.0004,-4.3624664)\" id=\"logo\">\n                        <path\n                            id=\"path1138\"\n                            d=\"m -2647.695,4.3911927 a 49.999952,49.999952 0 0 0 -23.7502,6.9298473 49.999952,49.999952 0 0 0 -18.4621,66.961801 49.999952,49.999952 0 0 0 66.2735,20.798005 49.999952,49.999952 0 0 0 23.1083,-65.50385 l -3.3518,-6.152338 A 49.999952,49.999952 0 0 0 -2647.695,4.3911927 Z m -25.8271,17.8968683 40.0404,0 0,9.563611 -5.4213,0 0,0.142742 c 2.0653,1.332267 3.666,2.926151 4.8019,4.781806 1.1359,1.903234 1.7038,4.068291 1.7038,6.494921 0,2.33145 -0.4905,4.448759 -1.4715,6.351981 -0.981,1.950816 -2.7108,3.425852 -5.1892,4.425045 1.7555,1.094365 3.3045,2.569205 4.647,4.424848 1.3424,1.903234 2.0137,4.139783 2.0137,6.709135 0,1.243033 -0.1052,2.427676 -0.3148,3.554802 l 2.2014,0 c 3.5626,0 6.4799,1.023115 8.7517,3.069081 2.2718,2.045976 3.4075,5.138601 3.4075,9.278123 0,0.904042 -0.052,1.808092 -0.155,2.712123 -0.052,0.904032 -0.1033,1.784204 -0.1549,2.640655 l -8.2094,0 c 0.1549,-1.189515 0.2323,-2.426642 0.2323,-3.711328 0,-1.379837 -0.3614,-2.378867 -1.0843,-2.997414 -0.6712,-0.570978 -1.8328,-0.85646 -3.4851,-0.85646 l -2.4008,0 0,6.994426 -7.3577,0 0,-6.994426 -32.6829,0 0,-10.13478 0.1272,0 0,-0.200431 22.6922,0 c 1.3425,0 2.6073,-0.04757 3.7948,-0.142744 1.1876,-0.09516 2.2203,-0.356951 3.0981,-0.785187 0.8777,-0.428225 1.5748,-1.070475 2.0911,-1.926936 0.5163,-0.80887 0.7744,-1.92714 0.7744,-3.354568 0,-1.427419 -0.3097,-2.593084 -0.9293,-3.497114 -0.568,-0.85645 -1.3425,-1.546492 -2.3235,-2.069878 -0.9294,-0.475807 -2.0136,-0.808673 -3.2528,-0.999006 -1.1875,-0.142732 -2.4009,-0.214214 -3.64,-0.214214 l -22.305,0 0,-10.134779 22.4597,0 c 1.1876,0 2.3494,-0.02369 3.4853,-0.07127 1.1875,-0.04758 2.2718,-0.261789 3.2528,-0.642443 0.981,-0.333064 1.7555,-0.927734 2.3235,-1.784194 0.6196,-0.80886 0.9293,-2.022117 0.9293,-3.639858 0,-0.475815 -0.1292,-1.118045 -0.3873,-1.926937 -0.2066,-0.761278 -0.6454,-1.5228 -1.3166,-2.28409 -0.6196,-0.713709 -1.5489,-1.332277 -2.7881,-1.855665 -1.1875,-0.523386 -2.7623,-0.784989 -4.7243,-0.784989 l -23.2343,0 0,-10.134584 z\"\n                        />\n                    </g>\n                </LogoSvg>\n            </LogoA>\n        );\n    }\n}\n\nexport default Logo;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport Logo from './Logo';\n\nconst Nav = styled.nav`\n  display: flex;\n  flex-flow: row nowrap;\n  position: relative;\n  height: 80px;\n  background-color: #fff;\n`;\n\nconst Navbar = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  z-index: 150;\n  position: relative;\n`;\n\nconst Navicon = styled.div`\n  display: flex;\n  position: absolute;\n  right: 6px;\n  width: 48px;\n  height: 100%;\n  background-color: transparent;\n  z-index: 1038;\n  .icon-nav {\n    width: 32px;\n    height: auto;\n  }\n  path {\n    fill: #787;\n    fill-opacity: 1;\n    stroke: none;\n    stroke-width: 1.5;\n    stroke-linejoin: round;\n    stroke-miterlimit: 4;\n    stroke-dasharray: none;\n    stroke-opacity: 1;\n  }\n`;\n\nconst Menu = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nposition: fixed;\ntop: 0;\nright: 0;\nz-index: 160;\nmax-width: 400px;\nwidth: 90%;\nheight: 100%;\nbox-shadow: 0 2px 6px rgba(0, 0, 0, 0.5);\npointer-events: auto;\nwill-change: transform;\npadding-top: 54px;\noverflow-y: scroll;\nbackground-color: #fff;\n&.nav--hidden {\n    -webkit-transform: translateX(103%);\n    transform: translateX(103%);\n    transition: transform 130ms ease-out;\n}\n  &.nav--visible {\n    -webkit-transform: none;\n    transform: none;\n    transition: transform 330ms ease;\n  }\n`;\n\n\nclass ToggleNav extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isToggleOn: true };\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn\n    }));\n  }\n  render() {\n    return (\n      <Nav>\n        <Logo/>\n        <Navbar>\n          <Navicon onClick={this.handleClick}>\n            <svg className=\"icon-nav\" viewBox=\"0 0 24 18.000001\">\n              <g transform=\"translate(0,-1034.3622)\" id=\"layer1\">\n                <path\n                  d=\"M -7.3841859e-7,1041.8622 H 24 v 3 H -7.3841859e-7 Z\"\n                  id=\"rect4136\"\n                />\n                <path\n                  d=\"M -7.3841859e-7,1034.3622 H 24 v 3 H -7.3841859e-7 Z\"\n                  id=\"rect4136-3\"\n                />\n                <path\n                  d=\"M -7.3841859e-7,1049.3622 H 24 v 3 H -7.3841859e-7 Z\"\n                  id=\"rect4136-6\"\n                />\n              </g>\n            </svg>\n          </Navicon>\n          <Menu\n            className={\n              this.state.isToggleOn ? \"nav--hidden\" : \"nav--visible\"\n            }\n          >\n          </Menu>\n        </Navbar>\n      </Nav>\n    );\n  }\n}\n \n export default ToggleNav; \n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Banner = styled.h1`\n  color: #fff;\n  font-weight: 500;\n  padding: .5em 0;\n  line-height: 1em;\n  word-spacing: 5000px;\n  text-transform: uppercase;\n  font-size: 3em;\n    @media (min-width: 600px) {\n    font-size: 6em;\n  }\n  @media (min-width: 900px) {\n    font-size: 8em;\n  }\n`;\n\nexport default class extends Component {\n  render() {\n    return (\n      <Banner>\n        { this.props.val }\n      </Banner>\n\n    );\n  }\n}\n","import styled from 'styled-components';\n\nconst Flex = styled.section`\n   display: flex;\n   flex-flow: row wrap;\n   flex: 1 1 auto;\n   justify-content: ${props => props.justify || \"center\"};\n   width: 100%;\n   max-width: 1000px;\n   margin: 0 auto;\n   padding: ${props => props.pad || \"2em 1em\"};\n`;\n\nexport default Flex;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Tagline = styled.p`\n  color: #fff;\n  font-weight: 400;\n  background-color: rgba(0,0,0,.375);\n  padding: .35em;\n  font-size: 1.05em;\n  margin: 0 0 3em 0;\n    @media (min-width: 360px) {\n    font-size: 1.15em;\n  }\n  @media (min-width: 900px) {\n    font-size: 2em;\n  }\n\n`;\n\nexport default class extends Component {\n  render() {\n    return (\n      <Tagline>\n        { this.props.val }\n      </Tagline>\n\n    );\n  }\n}\n","import React from 'react';\nimport styled from \"styled-components\";\n\nimport Banner from './styles/Banner';\nimport Flex from './styles/Flex';\nimport Tagline from './styles/Tagline';\nimport Tile from '../assets/tile.svg';\n\n\nconst Section = styled.section`\n  position: relative;\n  height: 100%;\n  min-height: 100vh;\n  min-height: 350px;\n  background-image: url(${Tile}),\n    linear-gradient(202deg, rgba(2, 97, 227, 1), rgba(50, 156, 251, 1));\n  background-repeat: repeat, no-repeat;\n  background-size: 225px 225px, auto;\n  background-position: center, center;\n  @media (min-width: 760px) {\n    background-size: 325px 325px, auto;\n    background-position: center, center;\n  }\n  @media (min-width: 900px) {\n    min-height: 700px;\n    background-size: 425px 425px, auto;\n    background-position: center, center;\n  }\n`;\n\nexport default () => (\n    <Section>\n      <Flex justify=\"flex-start\">\n      <Banner val=\"Nav Drawer\" />\n      <Tagline val=\"UI Component built with React JS\" />\n      </Flex>\n    </Section>\n);","import React, { Component } from 'react';\nimport ToggleNav from './components/Nav';\nimport Section from './components/Section';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ToggleNav/>\n        <Section/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}